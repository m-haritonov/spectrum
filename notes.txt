TODO: MERGE BRANCH
TODO: добавить старые версии проекта в начало истории репозитория
TODO: MOVE PROJECT TO GITHUB.COM

TODO: create big example (with anonymous specs, matchers, with all errors, long spec names)
TODO: check project file charset (all files should be in "US-ASCII" charset; find not "US-ASCII" chars in files by regexp), add reminding to readme: "Framework files is in the "US-ASCII" charset"
TODO: add tests for charset usages

TODO: replace "if ($result['result'] === false)" to "if ($result['result'] === false || ($result['result'] !== true && $result['result'] !== null))" in ResultBuffer::getTotalResult method, add tests

TODO: add href="#state1/2/etc." to "detailsControl" links, register onhashchange listener (add "stateX" class to body in listener), use body class for fonding/expand components
TODO: use "assertSame" instead of "assertContains" in Test::assertThrowsException
TODO: testware -> _testware

TOOD: move \spectrum\tools\* to \spectrum\_internal\*? 
TOOD: move \spectrum\builders\internal\* to \spectrum\_internal\*? 

TODO: replace call_user_func($function)/call_user_func_array($function) to $function() for more performance
TODO: return; -> return null;
TODO: remove while(true)
TODO: while ($parent) -> while ($parent = $this->getRunningParentSpec())
TODO: MatcherCallDetailsInterface -> details\MatcherCallInterface
TODO: choose curly bracket style for PHP and JavaScript code

TODO: 'Error handler in spec "' . $this->getOwnerSpec()->getName() . '" was removed' -> 'Error handler was removed'
TODO: Error handler error details string -> details\Error
TODO: add all "details\*" support to reports

TODO: remove onEndingSpecExecuteBefore/After???
TODO: remove onMatcherCallStart/Finish???

TODO: вынести dispatchPluginEvent в функцию в core\*, а плагины сделать просто функциями, которым передавать параметр $spec? где сохранять активированные плагины? как организовать доступ к плагинам через $spec->pluginName->* в таком случае?

TODO: use config::getFunction('...') for all functions ("builders\*", etc.)
TODO: init.php -> remove "if (!function_exists('...')){}" from "require_once" calls
TODO: remove all interfaces, replace function(SomeInterface $object) to /** @param SomeInterface $object */ 
TODO: replace config::getXxxClass to config::getClass('Xxx')
TODO: config::lock -> deny access from Spec/AssertInterface and builders ???
TODO: "if (static::$locked) throw new Exception('\spectrum\config is locked');" перенести в отдельный метод и заменить им вызовы setConfigValue

TODO: вынести общую часть из group и test в функцию createSpec
TODO: перенести testedValue из setTestedValue в setMatcherArguments в MatcherCallDetails???
TODO: remove ownerSpec from resultBuffer???
TODO: loadBaseMatchers — возвращать массив загруженных матчеров вместо добавления из в передаваемую спеку
TODO: перенести функции setBuildingSpec, getBuildingSpec, getExclusionSpecs, addExclusionSpec в пространство имён internal/storage ???
	или создать объект Storage и билдер getStorageOnce()
	или переименовать функции в функции вида setBuildingSpecInStorage
	или просто сделать функцию getPermanentStorage(), возвращающую \stdClass
	добавить слово current к имени переменных в хранилище
	callFunctionOnBuildingSpec -> callFunctionOnCurrentBuildingSpec
	filterOutExclusionSpecs -> filterOutCurrentExclusionSpecs
	
TODO: isRunningState and getRootSpec to internal
TODO: move plugins from "basePlugins" to parent namespace???

TODO: add abstract/final/static/private/protected/public string to report output in "objectVar" component

TODO: remove $ownerSpec from ResultBuffer???

TODO: удалить поддержку scalar значений у array контекстов
TODO: добавить поддержку функций в array контекстах: test(array(
	'aaa aaa' => array('a1' => 'aaa'),
	'aaa aaa' => function(){ $this->a1 = 'aaa'; },
), function(){});

TODO: рядом с результатом (серым шрифтом) и в верхнем и нижнем блоке писать кол-во выполненных тестов, время выполнения каждого теста и группы тестов (время выполнения группы вычислять либо путём сложения времени детей либо замерять реальное время выполнения либо писать оба значения либо одно значение писать в title)
TODO: добавить информацию о фреймворке (название, версию и адрес сайта): либо при нажатии на иконку [i] либо в конце нижнего блока totalResult (<a href="http://spectrum-framework.org/">Spectrum 1.0</a>)

TODO: change text "Run results buffer contains" and etc.
TODO: добавить всплывающие подсказки и текст ссылок с разъяснениями к элементам ползунка "detailsControl"
TODO: success ("has empty" or "success, has empty")
TODO: плагин "Report": добавить title к резальтату или выводить "success", если есть "success" и "empty" дети
		empty title — "empty or has empty", "all or one of children was empty"
		all specs is "success"
		one or more specs is "fail"
		one or more specs is "empty" and has no "fail"
		
TODO: Показывать в отчетах null для value1 у оператора throws если исключение не выбрасывалось
TODO: вернуть отображение trace в оъектах exception, сделав сворачивание списка/разворачивание элементов дерева
TODO: реализовать проверку *RECURSION* в ArrayVar и ObjectVar (в элементе массива тоже может содержаться объект)

TODO: fix reports in all browsers 

TODO: deny "no array" elements in convertArrayWithContextsToSpecs???

TODO: plugin OutputCapture (плюс вывод в отчёте в отдельном блоке с заголовком "Output from test:" с визуализацией пробельных символов), onEndingSpecExecuteBefore/After or onSpecRunStart/Finish
TODO: matchers: be(function(){})->outputs/prints('aaa a aaaaa ');

TODO: rename "Contexts" to "ContextModifiers"
TODO: move "...\contexts\Data" to "core\ContextData" ???
TODO: callFunctionInContext move to "tools", add "$context" parameter
TODO: перенести инициализацию контекстов в плагин "Test"???
TODO: заменить this() передачей аргумента с экземпляром контекста???

TODO: игнорировать пойманные ошибки в случае установки catchPhpErrors в "0" или отображать простам текстом в выводе ???
TODO: добавить setCatchPhpErrors(true/false) ???
TODO: rename setCatchPhpErrors to setErrorLevel/setPhpErrorLevel/setCatchPhpErrorLevel/setCatchingPhpErrorLevel ???
TODO: rename activateMoment to activateType/activationType ???
TODO: ResultBuffer: rename $result['result'] to $result['value/flag'] ???

TODO: проверить методы интерфейсов на соответствие методам класса и наоборот
TODO: написать doc комментарии к методам и функциям (глобальным, расположенным в init.php, в частности)
TODO: заменить call_user_func_array в глобальных алиасах билдеров на прямой вызов с передачей аргументов
TODO: проработать тексты сообщений в исключениях (возможно, привести к единому формату вида "function/method name: message")
TODO: исправить грамматические ошибки в названиях классов, методов и функций, а сообщениях исключений, в тексте отчётов. Ошибки для исправления:
	is deny -> is denied
	IsDeny -> IsDenied
	
TODO: create "\spectrum\tools|helpers\createTree" function and similar auxiliary functions and classes?
	
TODO: array context group:
	group('aaa', array(
		'Номер мегафон' => array('code' => '495', 'phone' => '35861923'),
		'group: Межгород' => array(
			'Номер мегафон' => array('code' => '495', 'phone' => '35861923'),
			'Номер МТС' => array('code' => '495', 'phone' => '35861923'),
		),
	), function(){
		test('bbb', function(){});
	});

TODO: добавить возможность перевода??? Пример: 
test('Makes something', function(){}, function(){
	// ...
	// ...
	// ...
	// ...
	// ...
}, array(
	'translations/langs' => array(
		'ru' => 'Делает что-либо',
	)
));

или:
translate('Делает что-либо', 'ru');
it('Makes something'), function(){});

установка используемого для отображения языка:
config::setOutputLanguage('ru');

TODO: add parameters to \spectrum\run function:
	$paths/$files — for example, "/aaa.php", "/abc/*.php", "/abc/**.php", array("./aaa.php", "./abc/*.php") 
	$specId — for example, spec1_1_1
	$runInAllContexts = false
	??? $disableOutputBuffers — while (ob_get_level()){ ob_end_flush(); }
	$showFileNameAsGroup
	$fileNameAsGroupType = linear (all files as root groups), hierarchical (each file group as child of folder group) 

TODO: add "run this test in this context" and "run this test in all contexts" links to "Reports" plugin

TODO: создать функцию для автоматической генерации контекстов во всевозможных комбинациях на основе множества значений (предполагаемые названия функции: combine, generate)
TODO: assert, счетчик вызовов
	Command::expectCount();
	incrementCount()
	count(getRunningInstance()->getResultStack())

=== Documentation ===

TODO: example for creation of describe/it/case functions
TODO: кодировка влияет только на вывод данных и не влияет на работу тестов
TODO: выводимые в формате HTML данные адаптированы для копирования в буфер обмена в текстовом виде
TODO: Убрать лишние условия дя примеров, пускай пучше бутлут одни суккесы в результатах
TODO: Убрать из примера files, оставив только базы данных
TODO: Для примеров использовать скриншоты и ссылку на живое выполнение ???
TODO: значения порядка вызова событий от -100 до 100 используются при регистрации базовых плагинов
TODO: заменить "Spectrum is a PHP framework for BDD specification test" на "Spectrum is a PHP framework for test automation"
TODO: поддерживаются кодировки, являющиеся надмножеством ASCII
TODO: add "output to file" example to documentation:
	ob_start(function($buffer){
		static $handler;
		if (!$handler)
			$handler = fopen(__DIR__ . '/tmp.txt', 'w');
		
		fwrite($handler, $buffer);
		return false; // Use "return '';" to disable displaying 
	});
	
TODO: на главной закрепить образец использования:
	test('ожидаемый результат', function(){
		// код для проверки ожидаемого результата
	})
TODO: пример добавления своего драйвера для отчётов
	class MyReports extends \spectrum\core\plugins\basePlugins
	{
		protected function getDriverClass()
		{
			if (mb_strtolower(config::getOutputFormat(), 'us-ascii') == 'html')
				return 'myDriverClass';
			else
				return parent::getDriverClass();
		}
	}

config::registerSpecPlugin('MyReports');

=== Multi-charset support problems ===

group(function(){
	before(function(){ $this->aaa = 'text in utf-8'; });
	group(function(){
		before(function(){ $this->bbb = 'text in cp1251'; });
		test(function(){
			// What is result must be added to ResultBuffer (true or false)?
			// How to detect correct charset for output and compare variables?
			be($this->aaa)->eq($this->bbb);
		});
	}, 'cp1251');
}, 'utf-8');

group(function(){
	before(function(){ $this->aaa = 'text in utf-8'; });
	test(function(){
		message($this->aaa); // Now message contains utf-8 text, but test charset is set to cp1251
		message('aaa is: ' . $this->aaa); // Now message contains incorrect string (in mixed charsets)
	}, 'cp1251');
}, 'utf-8');

group(function(){
	before(function(){ \projectName\SomeClass::setText('text in utf-8'); });
	test(function(){
		// What behaviour is expected?
		if (\projectName\SomeClass::getText() != 'text in cp1251')
			fail();
	}, 'cp1251');
}, 'utf-8');

group(function(){
	addMatcher('something', function($text){
		return in_array($text, array('text in utf-8', 'text in utf-8', 'text in utf-8'));
	});
	test(function(){
		// What result is expected (true or false)?
		// Pass charset to matcher function (and to "before/after" functions by analogy)? 
		be('text in cp1251')->something();
	}, 'cp1251');
}, 'utf-8');

group(function(){
	addMatcher('matcherNameInUtf8', function(){});
	test(function(){
		be()->matcherNameInCp1251(); // Is matcher call handling (in "Assert" class) need converting for matcher name?
	}, 'cp1251');
}, 'utf-8');

TODO: add limited multi-charset support (with using input charset of each test/group for output/etc. and without using input charset for inner string transformation)???

=== Mocks ===

Spy
FileSystemMockReal
FileSystemMockVirtual

=== Additional matchers ===

TODO: create additional matchers? List:

spectrum_DefaultMatchers_Base_BePhpError(level)

spectrum_DefaultMatchers_File_BeFileExists
spectrum_DefaultMatchers_File_BeFileContentEqual
spectrum_DefaultMatchers_File_BeFileIsDir
spectrum_DefaultMatchers_File_BeFileIsFile
spectrum_DefaultMatchers_File_BeFileIsLink
spectrum_DefaultMatchers_File_BeFileIsExecutable
spectrum_DefaultMatchers_File_BeFileIsReadable
spectrum_DefaultMatchers_File_BeFileIsUploaded
spectrum_DefaultMatchers_File_BeFileIsWritable

spectrum_DefaultMatchers_Array_BeArrayHasKey
spectrum_DefaultMatchers_Array_BeArrayHasValue
spectrum_DefaultMatchers_Array_BeArrayHasAllKeys
spectrum_DefaultMatchers_Array_BeArrayHasAllValues
spectrum_DefaultMatchers_Array_BeArrayHasAnyKey
spectrum_DefaultMatchers_Array_BeArrayHasAnyValue
spectrum_DefaultMatchers_Array_BeArrayUnsortedEqual
spectrum_DefaultMatchers_Array_BeArrayUnsortedEqualRecursive
spectrum_DefaultMatchers_Array_BeArrayUnsortedIdentical
spectrum_DefaultMatchers_Array_BeArrayUnsortedIdenticalRecursive
spectrum_DefaultMatchers_Array_BeArrayCountEqual

spectrum_DefaultMatchers_String_BeStringContain
spectrum_DefaultMatchers_String_BeStringContainInPosition
spectrum_DefaultMatchers_String_BeStringStartWith
spectrum_DefaultMatchers_String_BeStringEndWith
spectrum_DefaultMatchers_File_BeStringEndWithAnySlash
spectrum_DefaultMatchers_File_BeStringStartWithAnySlash

spectrum_DefaultMatchers_RegExp_BePregMatch

spectrum_DefaultMatchers_Xml_BeXmlWellFormed
spectrum_DefaultMatchers_Xml_BeXmlValid

spectrum_DefaultMatchers_Html_BeHtmlAttributeEqual
spectrum_DefaultMatchers_Html_BeHtmlContainTag
spectrum_DefaultMatchers_Html_BeHtmlCorrect
spectrum_DefaultMatchers_Html_BeHtmlWellFormed
spectrum_DefaultMatchers_Html_BeHtmlValid