TODO: определить минимальную версию PHP. Пока это 5.3.9 из-за is_a
TODO: fix reports in all browsers
TODO: config::setOutputResultBufferElements('all fail success empty')

TODO: писать ключ (key => value) в getArrayWithContextsElementTitle
TODO: обрезать параметры функции при выводе в reports
 
TODO: test('', array(
	array('name', 'name', 'name),
	array('value', 'value', 'value'),
	array('value', 'value', 'value'),
	array('value', 'value', 'value'),
	array('value', 'value', 'value'),
), function(){}); ???

TODO: add tests for charset usages

TODO: array context group:
	group('aaa', array(
		'Номер мегафон' => array('code' => '495', 'phone' => '35861923'),
		'group: Межгород' => array(
			'Номер мегафон' => array('code' => '495', 'phone' => '35861923'),
			'Номер МТС' => array('code' => '495', 'phone' => '35861923'),
		),
	), function(){
		test('bbb', function(){});
	});

TODO: рядом с результатом (серым шрифтом) и в верхнем и нижнем блоке писать кол-во выполненных тестов, время выполнения каждого теста и группы тестов (время выполнения группы вычислять либо путём сложения времени детей либо замерять реальное время выполнения либо писать оба значения либо одно значение писать в title)
TODO: create be()->triggersError($errorType = null, $errorMessage = null)  ???
TODO: create plugin OutputCapture (плюс вывод в отчёте в отдельном блоке с заголовком "Output from test:" с визуализацией пробельных символов), onEndingSpecExecuteBefore/After or onSpecRunStart/Finish
TODO: create plugin BackupGlobalVariables ???
TODO: matchers: be(function(){})->outputs/prints('aaa a aaaaa ');

TODO: проработать тексты сообщений в исключениях (возможно, привести к единому формату вида "function/method name: message")
TODO: исправить грамматические ошибки в названиях классов, методов и функций, в сообщениях исключений, в тексте отчётов и т.п.
TODO: be()->throws() vs be()->throwing() vs be()->throw() vs the()->throws()
TODO: set breakOnFirstMatcherFail to true by default

TODO: change context declaration style???

// from:
group('', function(){}, function(){});

// to:
contexts(function(){});
group('', function(){});


// from:
test('', function(){}, function(){});

// to:
group(function(){
	contexts(function(){});
	test('', function(){});
});


// from:
test('', array(
	array('aaa' => 'bbb'),
	array('aaa' => 'bbb'),
	array('aaa' => 'bbb'),
	array('aaa' => 'bbb'),
), function(){});

// to:
group(function(){
	contexts(array(
		array('aaa' => 'bbb'),
    	array('aaa' => 'bbb'),
    	array('aaa' => 'bbb'),
    	array('aaa' => 'bbb'),
	), $addType = null);
	
	// Values: null, "up/wrap", "down/inject", "next"
	// When $addType is "up", then specs is bound to contexts as children (to all descendant ending contexts)
	// When $addType is "down", then contexts is bound to specs as children (to all descendant ending specs)
	// When $addType is "next", then contexts is bound to next spec as children (to all descendant ending specs)
	// When $addType is null, then:
	// When there are many specs in group, then uses "up" type
	// When there is one spec in group, then uses "down" type
	test('', function(){});
});






TODO: добавить возможность перевода??? Пример: 
test('Makes something', function(){}, function(){
	// ...
	// ...
	// ...
	// ...
	// ...
}, array(
	'translations/langs' => array(
		'ru' => 'Делает что-либо',
	)
));

или:
translate('Делает что-либо', 'ru');
it('Makes something'), function(){});

установка используемого для отображения языка:
config::setOutputLanguage('ru');

TODO: add parameters to \spectrum\run function:
	$paths/$files — for example, "/aaa.php", "/abc/*.php", "/abc/**.php", array("./aaa.php", "./abc/*.php") 
	$specId — for example, spec1_1_1
	$runInAllContexts = false
	??? $disableOutputBuffers — while (ob_get_level()){ ob_end_flush(); }
	$showFileNameAsGroup
	$fileNameAsGroupType = linear (all files as root groups), hierarchical (each file group as child of folder group) 

TODO: add "run this test in this context" and "run this test in all contexts" links to "Reports" plugin

TODO: создать функцию для автоматической генерации контекстов во всевозможных комбинациях на основе множества значений (предполагаемые названия функции: combine, generateContexts; в "\spectrum\tools\*" или в "\spectrum\builders\*")
TODO: create "\spectrum\tools\createTree" function and similar auxiliary functions and classes?
TODO: create "\spectrum\tools\incrementCounter($counterName)" and "\spectrum\tools\getCounterValue($counterName)" functions?

=== Multi-charset support problems ===

group(function(){
	before(function(){ $this->aaa = 'text in utf-8'; });
	group(function(){
		before(function(){ $this->bbb = 'text in cp1251'; });
		test(function(){
			// What is result must be added to ResultBuffer (true or false)?
			// How to detect correct charset for output and compare variables?
			be($this->aaa)->eq($this->bbb);
		});
	}, 'cp1251');
}, 'utf-8');

group(function(){
	before(function(){ $this->aaa = 'text in utf-8'; });
	test(function(){
		message($this->aaa); // Now message contains utf-8 text, but test charset is set to cp1251
		message('aaa is: ' . $this->aaa); // Now message contains incorrect string (in mixed charsets)
	}, 'cp1251');
}, 'utf-8');

group(function(){
	before(function(){ \projectName\SomeClass::setText('text in utf-8'); });
	test(function(){
		// What behaviour is expected?
		if (\projectName\SomeClass::getText() != 'text in cp1251')
			fail();
	}, 'cp1251');
}, 'utf-8');

group(function(){
	addMatcher('something', function($text){
		return in_array($text, array('text in utf-8', 'text in utf-8', 'text in utf-8'));
	});
	test(function(){
		// What result is expected (true or false)?
		// Pass charset to matcher function (and to "before/after" functions by analogy)? 
		be('text in cp1251')->something();
	}, 'cp1251');
}, 'utf-8');

group(function(){
	addMatcher('matcherNameInUtf8', function(){});
	test(function(){
		be()->matcherNameInCp1251(); // Is matcher call handling (in "Assertion" class) need converting for matcher name?
	}, 'cp1251');
}, 'utf-8');

TODO: add limited multi-charset support (with using input charset of each test/group for output/etc. and without using input charset for inner string transformation)???

=== Mocks ===

Spy
FileSystemMockReal
FileSystemMockVirtual

=== Additional matchers ===

TODO: create additional matchers? List:

spectrum_DefaultMatchers_Base_BePhpError(level)

spectrum_DefaultMatchers_File_BeFileExists
spectrum_DefaultMatchers_File_BeFileContentEqual
spectrum_DefaultMatchers_File_BeFileIsDir
spectrum_DefaultMatchers_File_BeFileIsFile
spectrum_DefaultMatchers_File_BeFileIsLink
spectrum_DefaultMatchers_File_BeFileIsExecutable
spectrum_DefaultMatchers_File_BeFileIsReadable
spectrum_DefaultMatchers_File_BeFileIsUploaded
spectrum_DefaultMatchers_File_BeFileIsWritable

spectrum_DefaultMatchers_Array_BeArrayHasKey
spectrum_DefaultMatchers_Array_BeArrayHasValue
spectrum_DefaultMatchers_Array_BeArrayHasAllKeys
spectrum_DefaultMatchers_Array_BeArrayHasAllValues
spectrum_DefaultMatchers_Array_BeArrayHasAnyKey
spectrum_DefaultMatchers_Array_BeArrayHasAnyValue
spectrum_DefaultMatchers_Array_BeArrayUnsortedEqual
spectrum_DefaultMatchers_Array_BeArrayUnsortedEqualRecursive
spectrum_DefaultMatchers_Array_BeArrayUnsortedIdentical
spectrum_DefaultMatchers_Array_BeArrayUnsortedIdenticalRecursive
spectrum_DefaultMatchers_Array_BeArrayCountEqual

spectrum_DefaultMatchers_String_BeStringContain
spectrum_DefaultMatchers_String_BeStringContainInPosition
spectrum_DefaultMatchers_String_BeStringStartWith
spectrum_DefaultMatchers_String_BeStringEndWith
spectrum_DefaultMatchers_File_BeStringEndWithAnySlash
spectrum_DefaultMatchers_File_BeStringStartWithAnySlash

spectrum_DefaultMatchers_RegExp_BePregMatch

spectrum_DefaultMatchers_Xml_BeXmlWellFormed
spectrum_DefaultMatchers_Xml_BeXmlValid

spectrum_DefaultMatchers_Html_BeHtmlAttributeEqual
spectrum_DefaultMatchers_Html_BeHtmlContainTag
spectrum_DefaultMatchers_Html_BeHtmlCorrect
spectrum_DefaultMatchers_Html_BeHtmlWellFormed
spectrum_DefaultMatchers_Html_BeHtmlValid